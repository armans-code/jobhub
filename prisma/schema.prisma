generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // pooling connection
  directUrl = env("POSTGRES_URL_NON_POOLING") // direct connection
}

model Company {
  id       String @id @default(cuid())
  name     String
  slogan   String @default("")
  password String
}

model Admin {
  id          String @id @default(cuid())
  email       String @unique
  supabase_id String @unique
}

model Job {
  id            String      @id @default(cuid())
  title         String
  description   String
  location      String
  vacancies     Int         @default(1)
  salary        Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  archived      Boolean     @default(false)
  applicants    Applicant[] @relation
  JobTag        JobTag[]
  type          JobType     @default(FULL_TIME)
  collectResume Boolean     @default(true)
  requireResume Boolean     @default(false)
}

model Applicant {
  id             String           @id @default(cuid())
  firstName      String
  lastName       String
  email          String
  phone          String
  location       String
  summary        String
  resumeLink     String
  pfpLink        String
  education      Education[]
  workExperience WorkExperience[]
  skills         Skill[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  jobId          String
  job            Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Education {
  id          String    @id @default(cuid())
  school      String
  degree      String
  gpa         Float
  startYear   Int
  endYear     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String
}

model WorkExperience {
  id          String    @id @default(cuid())
  title       String
  company     String
  location    String
  description String
  startMonth  Month
  endMonth    Month
  startYear   Int
  endYear     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String
}

model Skill {
  id          String    @id @default(cuid())
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  JobTag    JobTag[]
}

model JobTag {
  id        String   @id @default(cuid())
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, tagId])
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  TEMPORARY
}

enum Month {
  JAN
  FEB
  MAR
  APR
  MAY
  JUN
  JUL
  AUG
  SEP
  OCT
  NOV
  DEC
}